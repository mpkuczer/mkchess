continue
state[:castling_rights]
state[:castling_rights].to_s.tr('KQ', '')
color(i1, j1)
j2
j1
i2
i1
state
next_state
continue
next_state
continue
next_state
continue
state
next_state
continue
next_state
continue
next_state
continue
next_state[:get_castling_rights]
next_state
get_castling_rights
continue
get_castling_rights
j2
j1
i2
i1
continue
j2
i2
j1
i1
continue
j2
j1
i2
i1
continue
color(i1, j1) 
get_square(i1, j1)&.upcase == 'K'
get_castling_rights
castling_move(i1, j1, i2, j2)
j2
i2
j1
i1
continue
j2
i2
j1
i1
continue
self
j2
i2
j1
i1
continue
(legal_squares(i1, j1).include? [i2, j2]) 
(legal_squares(i1, j1).include? [i2, j2]) && 
    (color(i1, j1) == get_active_color)
(legal_squares(i1, j1).include? [i2, j2]) && 
j2
j1
i2
i1
continue
@move
continue
@move
continue
@move
i2
i1
j1
j2
continue
j2
j1
i2
i1
continue
@byebug
continue
@move
continue
move
@move
continue
@move
@game
move
@move
continue
@move
continue
@positions
position
@game
@move
move
continue
move
position
continue
locals
@move
continue
@new_position
@position
position
continue
active
continue
quit
continue
quit
continue
i
continue
board.each_with_index { |row, i| row.each_with_index { |square, j| puts get_square(i, j) } }
board.each_with_index do |row, i|
board
color
continue
@position.order
@position
@game.positions.count
@game.positions
@game
continue
params[:option]
    @game = @position.game
    @position = Position.find(params[:position_id].to_i)
params
continue
params
continue
params
@new_position
continue
params
continue
get_square(i, j).nil?
self
squares
get_square(i, j)
i
continue
j_
i_
i
squares
available(i_, j_-1)
continue
squares = []
squares
sq
squares
available(i, j-1)
available(i+1, j)
available(i, j+1)
available(i-1, j)
get_square(i, j)&.upcase
get_square(i, j)
continue
get_square(i, j)
continue
get_square(i, j)
continue
i
self
j
i
continue
fen.match Fen::REGEX
fen
'RNBQKB1R b KQkq - 9 99'.match /([kqrbnpKQRBNP1-8]{1,8})\b\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][
Fen::REGEX
continue
'RNBQKB1R b KQkq - 9 99'.match /([kqrbnpKQRBNP1-8]{1,8})\b\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'RNBQKB1R b KQkq - 9 99'.match /((?!.*\d\d)[kqrbnpKQRBNP1-8]{1,8})\b\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'RNBQKB1R b KQkq - 9 9'.match /((?!.*\d\d)[kqrbnpKQRBNP1-8]{1,8})\b\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'/RNBQKB1R b KQkq - 9 9'.match /\/((?!.*\d\d)[kqrbnpKQRBNP1-8]{1,8})\b\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'/RNBQKB1R b KQkq - 99 9'.match /\/((?!.*\d\d)[kqrbnpKQRBNP1-8]{1,8})\b\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 99 9'.match /\/((?!.*\d\d)[kqrbnpKQRBNP1-8]{1,8})\b\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 9 9'.match /\/((?!.*\d\d)[kqrbnpKQRBNP1-8]{1,8})\b\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 9 9'.match /\/((?!.*\d\d)[kqrbnpKQRBNP1-8]{1,8})\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 99 9'.match /\/((?!.*\d\d)[kqrbnpKQRBNP1-8]{1,8})\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 99 9'.match /\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 99 9'.match /\/((?!.*\d\d)[kqrbnpKQRBNP1-8]{1,8})\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 99 9'.match /\s([bw])\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 99 9'.match /\s((?:K?Q?k?q?)|-)\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 99 9'.match /\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 9 9'.match /\s((?:[a-h][1-8])|-)\s([0-9]+)\s([0-9]+)/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 9 9'.match Fen::REGEX
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 90 9'.match Fen::REGEX
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 90 9'.match /\s((?:[a-h][1-8])|-)                          # possible en passant
    \s([0-9]+)/
    \s([0-9]+)                                       # halfmove number
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 90 9'.match /\s((?:[a-h][1-8])|-)                          # possible en passant
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 90 9'.match Fen::REGEX
Fen::REGEX
continue
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 90 9'.match Fen::REGEX
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 9 9'.match Fen::REGEX
continue
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 10 9'.match Fen::REGEXquit
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 9 9'.match Fen::REGEX
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 10'.match Fen::REGEX
'3 91'.match /^\d+\s\d+$/
'3 91'.match /^\d+$/
'3 91'.match /\d+/
'91'.match /\d+/
'9'.match /\d+/
'9'.match /\d/
9.match /\d/
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 10'.match Fen::REGEX
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 9'.match Fen::REGEX
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 10'.match Fen::REGEX
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 3'.match Fen::REGEX
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2'.match Fen::REGEX
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2'.match Fen::Regex
'rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2'.match FEN::Regex
Fen::REGEX
fen.match Fen::REGEX
'aaa'.match /aaa/
fen.match Fen::REGEX
fen
get_state_from_fen
self.fen
self
get_state_from_fen[1..8]
continue
@position.validate_move(params[:i1].to_i, params[:j1].to_i, params[:i2].to_i, params[:j2].to_i)
continue
b = @position.color(2, 5) == @position.get_active_color
a = @position.legal_squares(2, 5).include? [4,5]
@position.color(2, 5) == @position.get_active_color
@position.color(2, 5)
@position.legal_squares(2, 5).include? [4,5] && (@position.color(2, 5) == @position.get_active_color) 
@position.legal_squares(2, 5).include? [4,5] && @position.color(2, 5) == @position.get_active_color 
@position.legal_squares(2, 5).include? [4,5]
@position.legal_squares(2, 5)
@position.legal_squares(7, 5)
@position.legal_squares(2, 5)
@position.available_squares(2, 5)
@position.available_moves(2, 5)
@position.color(2, 5)
@position.get_active_color
@position.validate_move(2, 5, 4, 5)
                               params[:i2].to_i,
