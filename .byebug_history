continue
@position.validate_move(params[:i1].to_i, params[:j1].to_i, params[:i2].to_i, params[:j2].to_i)
continue
b = @position.color(2, 5) == @position.get_active_color
a = @position.legal_squares(2, 5).include? [4,5]
@position.color(2, 5) == @position.get_active_color
@position.color(2, 5)
@position.legal_squares(2, 5).include? [4,5] && (@position.color(2, 5) == @position.get_active_color) 
@position.legal_squares(2, 5).include? [4,5] && @position.color(2, 5) == @position.get_active_color 
@position.legal_squares(2, 5).include? [4,5]
@position.legal_squares(2, 5)
@position.legal_squares(7, 5)
@position.legal_squares(2, 5)
@position.available_squares(2, 5)
@position.available_moves(2, 5)
@position.color(2, 5)
@position.get_active_color
@position.validate_move(2, 5, 4, 5)
                               params[:i2].to_i,
                               params[:j1].to_i,
@position.validate_move(params[:i1].to_i,
params[:j1].to_i
params[:i2].to_i
params[:i1].to_i
continue
params[:j2].to_i
params[:j1].to_i
params[:i2].to_i
params[:i1].to_i
params[:i1]
@position
continue
@pos
@position
@game
self
continue
@@@
continue
next_board
continue
next_board
en_passant_move(i1, i2, j1, j2)
castling_move(i1, i2, j1, j2)
validate_move(i1, j1, i2, j2)
i1
continue
next_board
continue
Position.all
continue
total_occupied_spaces
total_empty_spaces
continue
total_empty_spaces
total_occupied_spaces
continue
total_empty_spaces
total_occupied_spaces
continue
total_empty_spaces
total_occupied_spaces
continue
quit
row.filter { |x| x.match? /\w/ }
row.filter { |x| x == "r"}
row.filter { |x| x.match? /^\d/ }
total_occupied_spaces
row
continue
row
state
continue
self.correct_board_size
self.well_formed_fen
errors
get_state_from_fen.nil?
get_state_from_fen
self.save
self
fen
